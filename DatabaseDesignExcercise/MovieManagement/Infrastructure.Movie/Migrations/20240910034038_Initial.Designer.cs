// <auto-generated />
using System;
using Infrastructure.Movies.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Movies.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240910034038_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedDomain.Entities.Movie.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AwardActorId");

                    b.HasIndex("MovieActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AwardActorId");

                    b.HasIndex("AwardMovieId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardActor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AwardActors");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.ToTable("AwardCategories");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardMovie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AwardMovies");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardSeasons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.ToTable("AwardSeasons");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieDirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieDirectorId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieGenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovieDirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovieGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOfRelease")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwardMovieId");

                    b.HasIndex("MovieActorId");

                    b.HasIndex("MovieDirectorId");

                    b.HasIndex("MovieGenreId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieActor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieDirector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MovieDirectors");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Actor", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.AwardActor", null)
                        .WithMany("Actors")
                        .HasForeignKey("AwardActorId");

                    b.HasOne("SharedDomain.Entities.Movie.MovieActor", null)
                        .WithMany("Actors")
                        .HasForeignKey("MovieActorId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Award", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.AwardActor", null)
                        .WithMany("Awards")
                        .HasForeignKey("AwardActorId");

                    b.HasOne("SharedDomain.Entities.Movie.AwardMovie", null)
                        .WithMany("Awards")
                        .HasForeignKey("AwardMovieId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardCategories", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.Award", null)
                        .WithMany("Categories")
                        .HasForeignKey("AwardId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardSeasons", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.Award", null)
                        .WithMany("Seasons")
                        .HasForeignKey("AwardId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Director", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.MovieDirector", null)
                        .WithMany("Directors")
                        .HasForeignKey("MovieDirectorId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Genre", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.MovieGenre", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieGenreId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Movie", b =>
                {
                    b.HasOne("SharedDomain.Entities.Movie.AwardMovie", null)
                        .WithMany("Movies")
                        .HasForeignKey("AwardMovieId");

                    b.HasOne("SharedDomain.Entities.Movie.MovieActor", null)
                        .WithMany("Movies")
                        .HasForeignKey("MovieActorId");

                    b.HasOne("SharedDomain.Entities.Movie.MovieDirector", null)
                        .WithMany("Movies")
                        .HasForeignKey("MovieDirectorId");

                    b.HasOne("SharedDomain.Entities.Movie.MovieGenre", null)
                        .WithMany("Movies")
                        .HasForeignKey("MovieGenreId");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.Award", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardActor", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Awards");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.AwardMovie", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieActor", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieDirector", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SharedDomain.Entities.Movie.MovieGenre", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
